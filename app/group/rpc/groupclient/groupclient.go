// Code generated by goctl. DO NOT EDIT!
// Source: group.proto

package groupclient

import (
	"context"

	"github.com/wslynn/wechat-gozero/proto/group"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddFriendRequest             = group.AddFriendRequest
	AddFriendResponse            = group.AddFriendResponse
	GroupUserListRequest         = group.GroupUserListRequest
	GroupUserListResponse        = group.GroupUserListResponse
	HandleFriendRequest          = group.HandleFriendRequest
	HandleFriendResponse         = group.HandleFriendResponse
	MessageGroupInfo             = group.MessageGroupInfo
	MessageGroupInfoListRequest  = group.MessageGroupInfoListRequest
	MessageGroupInfoListResponse = group.MessageGroupInfoListResponse

	GroupClient interface {
		AddFriend(ctx context.Context, in *AddFriendRequest, opts ...grpc.CallOption) (*AddFriendResponse, error)
		HandleFriend(ctx context.Context, in *HandleFriendRequest, opts ...grpc.CallOption) (*HandleFriendResponse, error)
		GroupUserList(ctx context.Context, in *GroupUserListRequest, opts ...grpc.CallOption) (*GroupUserListResponse, error)
		MessageGroupInfoList(ctx context.Context, in *MessageGroupInfoListRequest, opts ...grpc.CallOption) (*MessageGroupInfoListResponse, error)
	}

	defaultGroupClient struct {
		cli zrpc.Client
	}
)

func NewGroupClient(cli zrpc.Client) GroupClient {
	return &defaultGroupClient{
		cli: cli,
	}
}

func (m *defaultGroupClient) AddFriend(ctx context.Context, in *AddFriendRequest, opts ...grpc.CallOption) (*AddFriendResponse, error) {
	client := group.NewGroupClientClient(m.cli.Conn())
	return client.AddFriend(ctx, in, opts...)
}

func (m *defaultGroupClient) HandleFriend(ctx context.Context, in *HandleFriendRequest, opts ...grpc.CallOption) (*HandleFriendResponse, error) {
	client := group.NewGroupClientClient(m.cli.Conn())
	return client.HandleFriend(ctx, in, opts...)
}

func (m *defaultGroupClient) GroupUserList(ctx context.Context, in *GroupUserListRequest, opts ...grpc.CallOption) (*GroupUserListResponse, error) {
	client := group.NewGroupClientClient(m.cli.Conn())
	return client.GroupUserList(ctx, in, opts...)
}

func (m *defaultGroupClient) MessageGroupInfoList(ctx context.Context, in *MessageGroupInfoListRequest, opts ...grpc.CallOption) (*MessageGroupInfoListResponse, error) {
	client := group.NewGroupClientClient(m.cli.Conn())
	return client.MessageGroupInfoList(ctx, in, opts...)
}
