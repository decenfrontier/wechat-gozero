// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	groupUserFieldNames          = builder.RawFieldNames(&GroupUser{})
	groupUserRows                = strings.Join(groupUserFieldNames, ",")
	groupUserRowsExpectAutoSet   = strings.Join(stringx.Remove(groupUserFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	groupUserRowsWithPlaceHolder = strings.Join(stringx.Remove(groupUserFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheGroupUserIdPrefix = "cache:groupUser:id:"
)

type (
	groupUserModel interface {
		Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error
		Insert(ctx context.Context, data *GroupUser) (sql.Result, error)
		TransInsert(ctx context.Context, session sqlx.Session, data *GroupUser) (sql.Result, error)

		FindOne(ctx context.Context, id int64) (*GroupUser, error)
		Update(ctx context.Context, data *GroupUser) error
		TransUpdate(ctx context.Context, session sqlx.Session, data *GroupUser) error

		Delete(ctx context.Context, id int64) error
	}

	defaultGroupUserModel struct {
		sqlc.CachedConn
		table string
	}

	GroupUser struct {
		Id         int64          `db:"id"`
		GroupId    string         `db:"group_id"`
		UserId     int64          `db:"user_id"`
		AliasName  sql.NullString `db:"alias_name"` // 用户对该群的备注名
		CreateTime time.Time      `db:"create_time"`
	}
)

func newGroupUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultGroupUserModel {
	return &defaultGroupUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`group_user`",
	}
}

func (m *defaultGroupUserModel) Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {
	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})
}

func (m *defaultGroupUserModel) Insert(ctx context.Context, data *GroupUser) (sql.Result, error) {
	groupUserIdKey := fmt.Sprintf("%s%v", cacheGroupUserIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, groupUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.GroupId, data.UserId, data.AliasName)
	}, groupUserIdKey)
	return ret, err
}

func (m *defaultGroupUserModel) TransInsert(ctx context.Context, session sqlx.Session, data *GroupUser) (sql.Result, error) {
	groupUserIdKey := fmt.Sprintf("%s%v", cacheGroupUserIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, groupUserRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.GroupId, data.UserId, data.AliasName)
		}
		return conn.ExecCtx(ctx, query, data.GroupId, data.UserId, data.AliasName)
	}, groupUserIdKey)
}

func (m *defaultGroupUserModel) FindOne(ctx context.Context, id int64) (*GroupUser, error) {
	groupUserIdKey := fmt.Sprintf("%s%v", cacheGroupUserIdPrefix, id)
	var resp GroupUser
	err := m.QueryRowCtx(ctx, &resp, groupUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupUserModel) Update(ctx context.Context, data *GroupUser) error {
	groupUserIdKey := fmt.Sprintf("%s%v", cacheGroupUserIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, groupUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.GroupId, data.UserId, data.AliasName, data.Id)
	}, groupUserIdKey)
	return err
}

func (m *defaultGroupUserModel) TransUpdate(ctx context.Context, session sqlx.Session, data *GroupUser) error {
	groupUserIdKey := fmt.Sprintf("%s%v", cacheGroupUserIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, groupUserRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.GroupId, data.UserId, data.AliasName, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.GroupId, data.UserId, data.AliasName, data.Id)
	}, groupUserIdKey)
	return err
}

func (m *defaultGroupUserModel) Delete(ctx context.Context, id int64) error {
	groupUserIdKey := fmt.Sprintf("%s%v", cacheGroupUserIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, groupUserIdKey)
	return err
}

func (m *defaultGroupUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGroupUserIdPrefix, primary)
}

func (m *defaultGroupUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGroupUserModel) tableName() string {
	return m.table
}
