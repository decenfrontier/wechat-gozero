// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	groupFieldNames          = builder.RawFieldNames(&Group{})
	groupRows                = strings.Join(groupFieldNames, ",")
	groupRowsExpectAutoSet   = strings.Join(stringx.Remove(groupFieldNames, "`create_time`", "`update_time`"), ",")
	groupRowsWithPlaceHolder = strings.Join(stringx.Remove(groupFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheGroupIdPrefix = "cache:group:id:"
)

type (
	groupModel interface {
		Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error
		Insert(ctx context.Context, data *Group) (sql.Result, error)
		TransInsert(ctx context.Context, session sqlx.Session, data *Group) (sql.Result, error)

		FindOne(ctx context.Context, id string) (*Group, error)
		Update(ctx context.Context, data *Group) error
		TransUpdate(ctx context.Context, session sqlx.Session, data *Group) error

		Delete(ctx context.Context, id string) error
	}

	defaultGroupModel struct {
		sqlc.CachedConn
		table string
	}

	Group struct {
		Id         string         `db:"id"`
		Name       string         `db:"name"`
		Type       int64          `db:"type"`   // 1表示单聊, 2表示群聊
		Status     int64          `db:"status"` // 1表示有效, 2表示无效(未同意), 3表示无效(拉黑)
		Config     sql.NullString `db:"config"` // 群聊配置
		CreateTime time.Time      `db:"create_time"`
	}
)

func newGroupModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultGroupModel {
	return &defaultGroupModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`group`",
	}
}

func (m *defaultGroupModel) Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {
	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})
}

func (m *defaultGroupModel) Insert(ctx context.Context, data *Group) (sql.Result, error) {
	groupIdKey := fmt.Sprintf("%s%v", cacheGroupIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, groupRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Name, data.Type, data.Status, data.Config)
	}, groupIdKey)
	return ret, err
}

func (m *defaultGroupModel) TransInsert(ctx context.Context, session sqlx.Session, data *Group) (sql.Result, error) {
	groupIdKey := fmt.Sprintf("%s%v", cacheGroupIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, groupRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Id, data.Name, data.Type, data.Status, data.Config)
		}
		return conn.ExecCtx(ctx, query, data.Id, data.Name, data.Type, data.Status, data.Config)
	}, groupIdKey)
}

func (m *defaultGroupModel) FindOne(ctx context.Context, id string) (*Group, error) {
	groupIdKey := fmt.Sprintf("%s%v", cacheGroupIdPrefix, id)
	var resp Group
	err := m.QueryRowCtx(ctx, &resp, groupIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupModel) Update(ctx context.Context, data *Group) error {
	groupIdKey := fmt.Sprintf("%s%v", cacheGroupIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, groupRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Type, data.Status, data.Config, data.Id)
	}, groupIdKey)
	return err
}

func (m *defaultGroupModel) TransUpdate(ctx context.Context, session sqlx.Session, data *Group) error {
	groupIdKey := fmt.Sprintf("%s%v", cacheGroupIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, groupRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Name, data.Type, data.Status, data.Config, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.Name, data.Type, data.Status, data.Config, data.Id)
	}, groupIdKey)
	return err
}

func (m *defaultGroupModel) Delete(ctx context.Context, id string) error {
	groupIdKey := fmt.Sprintf("%s%v", cacheGroupIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, groupIdKey)
	return err
}

func (m *defaultGroupModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGroupIdPrefix, primary)
}

func (m *defaultGroupModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGroupModel) tableName() string {
	return m.table
}
