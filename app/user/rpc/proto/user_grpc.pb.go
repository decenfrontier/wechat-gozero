// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClientClient is the client API for UserClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClientClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	PersonalInfo(ctx context.Context, in *PersonalInfoRequest, opts ...grpc.CallOption) (*PersonalInfoResponse, error)
}

type userClientClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClientClient(cc grpc.ClientConnInterface) UserClientClient {
	return &userClientClient{cc}
}

func (c *userClientClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/UserClient/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClientClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/UserClient/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClientClient) PersonalInfo(ctx context.Context, in *PersonalInfoRequest, opts ...grpc.CallOption) (*PersonalInfoResponse, error) {
	out := new(PersonalInfoResponse)
	err := c.cc.Invoke(ctx, "/UserClient/PersonalInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserClientServer is the server API for UserClient service.
// All implementations must embed UnimplementedUserClientServer
// for forward compatibility
type UserClientServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	PersonalInfo(context.Context, *PersonalInfoRequest) (*PersonalInfoResponse, error)
	mustEmbedUnimplementedUserClientServer()
}

// UnimplementedUserClientServer must be embedded to have forward compatible implementations.
type UnimplementedUserClientServer struct {
}

func (UnimplementedUserClientServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserClientServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserClientServer) PersonalInfo(context.Context, *PersonalInfoRequest) (*PersonalInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersonalInfo not implemented")
}
func (UnimplementedUserClientServer) mustEmbedUnimplementedUserClientServer() {}

// UnsafeUserClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserClientServer will
// result in compilation errors.
type UnsafeUserClientServer interface {
	mustEmbedUnimplementedUserClientServer()
}

func RegisterUserClientServer(s grpc.ServiceRegistrar, srv UserClientServer) {
	s.RegisterService(&UserClient_ServiceDesc, srv)
}

func _UserClient_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserClientServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserClient/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserClientServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserClient_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserClientServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserClient/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserClientServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserClient_PersonalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonalInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserClientServer).PersonalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserClient/PersonalInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserClientServer).PersonalInfo(ctx, req.(*PersonalInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserClient_ServiceDesc is the grpc.ServiceDesc for UserClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserClient",
	HandlerType: (*UserClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _UserClient_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _UserClient_Register_Handler,
		},
		{
			MethodName: "PersonalInfo",
			Handler:    _UserClient_PersonalInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
