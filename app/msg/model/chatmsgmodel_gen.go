// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chatMsgFieldNames          = builder.RawFieldNames(&ChatMsg{})
	chatMsgRows                = strings.Join(chatMsgFieldNames, ",")
	chatMsgRowsExpectAutoSet   = strings.Join(stringx.Remove(chatMsgFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	chatMsgRowsWithPlaceHolder = strings.Join(stringx.Remove(chatMsgFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheChatMsgIdPrefix   = "cache:chatMsg:id:"
	cacheChatMsgUuidPrefix = "cache:chatMsg:uuid:"
)

type (
	chatMsgModel interface {
		Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error
		Insert(ctx context.Context, data *ChatMsg) (sql.Result, error)
		TransInsert(ctx context.Context, session sqlx.Session, data *ChatMsg) (sql.Result, error)

		FindOne(ctx context.Context, id int64) (*ChatMsg, error)
		TransFindOne(ctx context.Context, session sqlx.Session, id int64) (*ChatMsg, error)

		FindOneByUuid(ctx context.Context, uuid string) (*ChatMsg, error)
		Update(ctx context.Context, data *ChatMsg) error
		TransUpdate(ctx context.Context, session sqlx.Session, data *ChatMsg) error

		Delete(ctx context.Context, id int64) error
	}

	defaultChatMsgModel struct {
		sqlc.CachedConn
		table string
	}

	ChatMsg struct {
		Id         int64     `db:"id"`
		GroupId    string    `db:"group_id"`
		SenderId   int64     `db:"sender_id"`
		Type       int64     `db:"type"` // 1文本, 2图片, 3视频, 4音频
		Content    string    `db:"content"`
		CreateTime time.Time `db:"create_time"`
		Uuid       string    `db:"uuid"`
	}
)

func newChatMsgModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultChatMsgModel {
	return &defaultChatMsgModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`chat_msg`",
	}
}

func (m *defaultChatMsgModel) Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {
	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})
}

func (m *defaultChatMsgModel) Insert(ctx context.Context, data *ChatMsg) (sql.Result, error) {
	chatMsgIdKey := fmt.Sprintf("%s%v", cacheChatMsgIdPrefix, data.Id)
	chatMsgUuidKey := fmt.Sprintf("%s%v", cacheChatMsgUuidPrefix, data.Uuid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, chatMsgRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.GroupId, data.SenderId, data.Type, data.Content, data.Uuid)
	}, chatMsgIdKey, chatMsgUuidKey)
	return ret, err
}

func (m *defaultChatMsgModel) TransInsert(ctx context.Context, session sqlx.Session, data *ChatMsg) (sql.Result, error) {
	chatMsgIdKey := fmt.Sprintf("%s%v", cacheChatMsgIdPrefix, data.Id)
	chatMsgUuidKey := fmt.Sprintf("%s%v", cacheChatMsgUuidPrefix, data.Uuid)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, chatMsgRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.GroupId, data.SenderId, data.Type, data.Content, data.Uuid)
		}
		return conn.ExecCtx(ctx, query, data.GroupId, data.SenderId, data.Type, data.Content, data.Uuid)
	}, chatMsgIdKey, chatMsgUuidKey)
}

func (m *defaultChatMsgModel) FindOne(ctx context.Context, id int64) (*ChatMsg, error) {
	chatMsgIdKey := fmt.Sprintf("%s%v", cacheChatMsgIdPrefix, id)
	var resp ChatMsg
	err := m.QueryRowCtx(ctx, &resp, chatMsgIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatMsgRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatMsgModel) TransFindOne(ctx context.Context, session sqlx.Session, id int64) (*ChatMsg, error) {
	chatMsgIdKey := fmt.Sprintf("%s%v", cacheChatMsgIdPrefix, id)
	var resp ChatMsg
	err := m.QueryRowCtx(ctx, &resp, chatMsgIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatMsgRows, m.table)
		if session != nil {
			return session.QueryRowCtx(ctx, v, query, id)
		}
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatMsgModel) FindOneByUuid(ctx context.Context, uuid string) (*ChatMsg, error) {
	chatMsgUuidKey := fmt.Sprintf("%s%v", cacheChatMsgUuidPrefix, uuid)
	var resp ChatMsg
	err := m.QueryRowIndexCtx(ctx, &resp, chatMsgUuidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `uuid` = ? limit 1", chatMsgRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, uuid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatMsgModel) Update(ctx context.Context, data *ChatMsg) error {
	chatMsgIdKey := fmt.Sprintf("%s%v", cacheChatMsgIdPrefix, data.Id)
	chatMsgUuidKey := fmt.Sprintf("%s%v", cacheChatMsgUuidPrefix, data.Uuid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, chatMsgRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.GroupId, data.SenderId, data.Type, data.Content, data.Uuid, data.Id)
	}, chatMsgIdKey, chatMsgUuidKey)
	return err
}

func (m *defaultChatMsgModel) TransUpdate(ctx context.Context, session sqlx.Session, data *ChatMsg) error {
	chatMsgIdKey := fmt.Sprintf("%s%v", cacheChatMsgIdPrefix, data.Id)
	chatMsgUuidKey := fmt.Sprintf("%s%v", cacheChatMsgUuidPrefix, data.Uuid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, chatMsgRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.GroupId, data.SenderId, data.Type, data.Content, data.Uuid, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.GroupId, data.SenderId, data.Type, data.Content, data.Uuid, data.Id)
	}, chatMsgIdKey, chatMsgUuidKey)
	return err
}

func (m *defaultChatMsgModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	chatMsgIdKey := fmt.Sprintf("%s%v", cacheChatMsgIdPrefix, id)
	chatMsgUuidKey := fmt.Sprintf("%s%v", cacheChatMsgUuidPrefix, data.Uuid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, chatMsgIdKey, chatMsgUuidKey)
	return err
}

func (m *defaultChatMsgModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheChatMsgIdPrefix, primary)
}

func (m *defaultChatMsgModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatMsgRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultChatMsgModel) tableName() string {
	return m.table
}
